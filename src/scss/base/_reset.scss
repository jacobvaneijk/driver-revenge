/**
 * Reset the box-sizing.
 *
 * Change from `box-sizing: content-box` to `box-sizing: border-box` so that
 * when you add `padding` or `border`s to an element, the overall declared
 * `width` does not change. For example, `width: 100px` will always be `100px`
 * despite the `border: 10px solid red;` and `padding: 20px;`.
 *
 * Credit: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */
html {
  box-sizing: border-box;
  user-select: none;
}

*::before,
*::after,
* {
  box-sizing: inherit;
  user-select: inherit;
}

/**
 * Make the viewport responsive.
 *
 * @viewport is needed because IE 10+ does not honor <meta name="viewport"> in
 * some cases. See https://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/.
 *
 * However, `device-width` is broken on IE 10 on Windows (Phone) 8,
 * (see https://timkadlec.com/2013/01/windows-phone-8-and-device-width/ and
 * https://github.com/twbs/bootstrap/issues/10497)
 * and the fix for that involves a snippet of JavaScript to sniff the user agent
 * and apply some conditional CSS.
 */
@-ms-viewport {
  width: device-width;
}

/**
 * Reset HTML, body and more.
 *
 * 1. As a side effect of setting the @viewport above, IE11 and Edge make the
 *    scrollbar overlap the content and automatically hide itself when not in
 *    use. Unfortunately, the auto-showing of the scrollbar is sometimes too
 *    sensitive, thus making it hard to click on stuff near the right edge of
 *    the page. So we add this style to force IE11 and Edge to use a "normal",
 *    non-overlapping, non-auto-hiding scrollbar.
 * 2. Changes the default tap highlight to be completely transparent in iOS.
 */
html {
  width: 100%;
  height: 100%;
  font-size: $font-size-root;
  -ms-overflow-style: scrollbar; /* [1] */
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); /* [2] */
}

body {
  overflow: hidden;
  width: 100%;
  height: 100%;
  font: {
    family: $font-family-base;
    weight: $font-weight-base;
    size: $font-size-base;
  }
  color: $body-text-color;
  line-height: $line-height-base;
  background: {
    color: $body-background-color;
  }
}

/**
 * Suppress the focus outline on elements that cannot be accessed via keyboard.
 *
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 *
 * Credit: https://github.com/suitcss/base
 */
[tabindex="-1"]:focus {
  outline: none !important;
}

/**
 * Remove top margins from headings.
 *
 * By default `<h1>` - `<h6>` all receive top and bottom margins. We remove the
 * top margin for easier control within type scales as it avoids margin
 * collapsing.
 */
h1, h2, h3, h4, h5, h6 {
  margin: {
    top: 0;
    bottom: .5rem;
  }
}

/**
 * Reset margins on paragraphs.
 *
 * Similarly, the top margin on `<p>`s get reset. However, we also reset the
 * bottom margin to use `rem` units instead of `em`.
 */
p {
  margin: {
    top: 0;
    bottom: 1rem;
  }
}

/**
 * Abbreviations and acronyms.
 */
abbr[title] {
  text: {
    decoration: none;
  }
  border: {
    bottom: {
      style: dotted;
      color: $abbr-border-color;
      width: 1px;
    }
  }
  cursor: help;
}

address {
  font: {
    style: normal;
  }
  line-height: inherit;
  margin: {
    bottom: 1rem;
  }
}

blockquote {
  margin: {
    top: 0;
    right: 0;
    bottom: 1rem;
  }
}

ol,
ul,
dl {
  margin: {
    top: 0;
    bottom: 1rem;
  }
}

ol ol,
ul ul,
ol ul,
ul ol {
  margin: {
    bottom: 0;
  }
}

dt {
  font: {
    weight: $font-weight-medium;
  }
}

dd {
  margin: {
    bottom: .5rem;
    left: 0;
  }
}

a {
  color: $link-text-color;
  text: {
    decoration: $link-text-decoration;
  }

  &:hover,
  &:focus {
    color: $link-hover-text-color;
    text: {
      decoration: $link-hover-text-decoration;
    }
  }

  &:focus {
    @include tab-focus();
  }

}

/**
 * Undo the link styling for placeholder links / named anchors (without href)
 * which have not been made explicitly keyboard-focusable (without tabindex).
 */
a:not([href]):not([tabindex]) {
  color: inherit;
  text: {
    decoration: none;
  }

  &:hover,
  &:focus {
    color: inherit;
    text: {
      decoration: none;
    }
  }

  &:focus {
    outline: none;
  }

}

/**
 * Code
 *
 * 1. Remove browser default top margin.
 * 2. Reset browser default of `1em` to `rem`s.
 */
pre {
  margin: {
    top: 0; /* [1] */
    bottom: 1rem; /* [2] */
  }
  overflow: auto;
}

/**
 * Figure
 *
 * 1. normalize.css adds `margin` to `figure`s as browsers apply it
 *    inconsistently. We reset that to create a better flow in-page.
 */
figure {
  margin: {
    top: 0;
    right: 0;
    bottom: 1rem;
  } /* [1] */
}

/**
 * Images
 *
 * 1. By default, `<img>`s are `display: inline-block;`. This assumes that, and
 *    vertically centers them. This won't apply should you reset them to `block`
 *    level.
 */
img {
  vertical-align: middle; /* [1] */
}

/**
 * iOS "clickable elements" fix for `role="button"`.
 *
 * Fixes "clickability" issue (and more generally, the firing of events such as
 * focus as well) for traditionally non-focusable elements with `role="button"`.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile.
 */
[role="button"] {
  cursor: pointer;
}

/**
 * Avoid a 300ms click delay on touch devices that support the `touch-action`
 * CSS property.
 *
 * In particular, unlike most browsers, IE11 and Edge on Windows 10 on touch
 * devices and IE Mobile 10-11 DON'T remove the click delay when
 * `<meta name="viewport" content="width=device-width">` is present. However,
 * they DO support removing the click delay via `touch-action: manipulation`.
 *
 * See:
 *  - https://v4-alpha.getbootstrap.com/content/reboot/#click-delay-optimization-for-touch
 *  - http://caniuse.com/#feat=css-touch-action
 *  - https://patrickhlauke.github.io/touch/tests/results/#suppressing-300ms-delay
 */
[role="button"],
textarea,
summary,
button,
select,
input,
area,
a {
  touch-action: manipulation;
  font-family: inherit;
}

table {
  background: {
    color: $table-background-color;
  }
  border-collapse: collapse;
}

caption {
  padding: {
    top: $table-cell-padding;
    bottom: $table-cell-padding;
  }
  color: $text-color-muted;
  text: {
    align: left;
  }
  caption-side: bottom;
}

th {
  text: {
    align: left;
  }
}

/**
 * 1. Allow labels to use `margin` for spacing.
 */
label {
  display: inline-block; /* [1] */
  margin: {
    bottom: .5rem;
  }
}

/**
 * Work around a Firefox / IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 *
 * Credit: https://github.com/suitcss/base/
 */
button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color;
}

/**
 * normalize.css includes `font: inherit;`, so `font-family`, `font-size`, etc.
 * are properly inherited. However, `line-height` is not inherited here.
 */
textarea,
select,
button,
input {
  line-height: inherit;
}

input[type="checkbox"],
input[type="radio"] {

  &:disabled {
    cursor: $cursor-disabled;
  }

}

/**
 * Remove the default appearance of temporal inputs to avoid a Mobile Safari bug
 * where setting a custom line-height prevents text from beign vertically
 * centered within the input.
 */
input[type="date-time-local"],
input[type="month"],
input[type="time"],
input[type="date"] {
  -webkit-appearance: listbox;
}

/**
 * 1. Textareas should really only resize vertically so that they don't break
 *    their (horizontal) containers.
 */
textarea {
  resize: vertical; /* [1] */
}

/**
 * 1. Chrome and Firefox set a `min-width: min-content;` on fieldsets, so we
 *    reset that to ensure it behaves more like a standard block element.
 * 2. Reset the default outline behavior of fieldsets so they don't affect page
 *    layout.
 */
fieldset {
  min-width: 0; /* [1] */
  padding: 0; /* [2] */
  margin: 0; /* [2] */
  border: 0; /* [2] */
}

/**
 * Reset the entire `<legend>` element to match the `<fieldset>` element.
 */
legend {
  display: block;
  width: 100%;
  padding: 0;
  margin: {
    bottom: .5rem;
  }
  font: {
    size: 1.5rem;
  }
  line-height: inherit;
}

/**
 * 1. This overrides the extra rounded corners on search inputs on iOS so that
 *    our `.form-control` class can properly style them. Note that this cannot
 *    simply be added to `.form-control` as it is not specific enough.
 */
input[type="search"] {
  -webkit-appearance: none; /* [1] */
}

output {
  display: inline-block;
}

/**
 * Always hide an element with the `hidden` HTML attribute.
 *
 * Credit: https://github.com/yahoo/pure/blob/master/src/base/css/base.css
 */
[hidden] {
  display: none !important;
}
